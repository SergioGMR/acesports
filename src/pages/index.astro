---
import Layout from "@/layouts/Layout.astro";
import type { SportEvent } from "@/interfaces/Event";
import SportCard from "@/components/SportCard.astro";
import LoadingIndicator from "@/components/LoadingIndicator.astro";
import FilterBar from "@/components/FilterBar.astro";
import ViewControls from "@/components/ViewControls.astro";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import customParseFormat from "dayjs/plugin/customParseFormat";

dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.extend(customParseFormat);

const request = fetch("https://epg-sports.vercel.app/api/getEvents")
	.then((response) => {
		if (!response.ok) {
			throw new Error("No se pudieron obtener los datos deportivos");
		}
		return response.json();
	})
	.catch((error) => {
		console.error(error);
		return null;
	});

const rawSports = await request;

// Función para verificar si un evento ya ha pasado
const isEventPast = (event: SportEvent): boolean => {
	try {
		// Validar formato de hora
		const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;
		const validHour = timeRegex.test(event.date.hour) ? event.date.hour : "00:00";

		// Crear fecha y hora del evento en Madrid
		const eventDateTime = `${event.date.day} ${validHour}`;
		const eventTimeMadrid = dayjs.tz(
			eventDateTime,
			"DD/MM/YYYY HH:mm",
			"Europe/Madrid",
		);

		// Comparar con la hora actual
		const now = dayjs();
		return eventTimeMadrid.isBefore(now);
	} catch (error) {
		console.warn("Error al procesar fecha del evento:", error);
		return false; // Si hay error, mostrar el evento por defecto
	}
};

const sportsData = rawSports.filter(
	(event: SportEvent) =>
		event.links &&
		event.links.length > 0 &&
		!isEventPast(event) // Filtrar eventos que ya han pasado
);

const geoIpRequest = fetch("https://get.geojs.io/v1/ip/geo.json")
	.then((response) => {
		if (!response.ok) {
			throw new Error("No se pudo obtener la ubicación del usuario");
		}
		return response.json();
	})
	.catch((error) => {
		console.error(error);
		return null;
	});
const geoIp = await geoIpRequest;
const userTimezone = geoIp?.timezone;
---

<Layout title="ACESports" lastUpdate={Date.now()}>
	<!-- Hero Banner mejorado con animación y mejor UX -->
	<section
		class="relative w-full bg-gradient-to-r from-blue-900 via-indigo-900 to-purple-900 py-12 px-6 mb-8 overflow-hidden"
	>
		<!-- Background pattern con animación sutil -->
		<div
			class="absolute inset-0 bg-[url('/og-image.webp')] bg-cover bg-center opacity-20 animate-pulse-slow"
		>
		</div>
		<!-- Gradient overlay -->
		<div
			class="absolute inset-0 bg-gradient-to-b from-black/30 to-transparent"
		>
		</div>

		<div class="container mx-auto z-10 relative">
			<div class="text-center">
				<h1
					class="text-4xl md:text-6xl font-extrabold text-white mb-4 tracking-tight"
				>
					<span
						class="bg-clip-text text-transparent bg-gradient-to-r from-yellow-400 to-orange-500 animate-shimmer-slow"
						>ACE</span
					><span class="text-shadow">Sports</span>
				</h1>
				<p
					class="text-lg md:text-xl text-gray-100 mb-8 max-w-3xl mx-auto font-medium"
				>
					Los mejores eventos deportivos en vivo, organizados para tu
					comodidad
				</p>

				<!-- Nuevo componente de filtros mejorado -->
				<FilterBar />
			</div>
		</div>
	</section>

	<main class="container mx-auto py-8 px-4 sm:px-6 lg:px-10">
		<!-- Header con contador de eventos y controles -->
		<div class="flex flex-wrap items-center justify-between mb-6 gap-y-3">
			<div id="eventsContainer" class="flex items-center">
				<div
					id="eventsCount"
					class="text-gray-500 text-sm font-medium px-4 py-1.5 bg-gray-100/50 backdrop-blur-sm rounded-full border border-gray-200/50 shadow-sm"
				>
					Cargando eventos...
				</div>
			</div>

			<!-- Controles de vista usando componente -->
			<ViewControls />
		</div>

		<!-- Indicador de carga -->
		<div id="loadingContainer" class="mb-4">
			<LoadingIndicator />
		</div>

		<!-- Contenedor principal de eventos con transición suave -->
		<div
			id="eventsGrid"
			class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-6 transition-all duration-300"
		>
			{
				sportsData.map((event: SportEvent) => (
					<SportCard
						event={event}
						timeZone={userTimezone || "Europe/Madrid"}
					/>
				))
			}
		</div>

		<!-- Mensaje cuando no hay resultados -->
		<div id="noResults" class="hidden py-20 text-center">
			<div
				class="max-w-md mx-auto bg-gray-50 rounded-xl p-8 border border-gray-200"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="h-16 w-16 text-gray-400 mx-auto mb-4"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="1.5"
						d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
					></path>
				</svg>
				<p class="text-xl text-gray-700 mb-4 font-medium">
					No se encontraron eventos con los filtros seleccionados
				</p>
				<button
					id="resetFilters"
					class="mt-2 bg-gradient-to-r from-blue-600 to-blue-800 hover:from-blue-700 hover:to-blue-900 text-white py-2.5 px-6 rounded-lg transition-all shadow-md hover:shadow-lg"
				>
					Reiniciar filtros
				</button>
			</div>
		</div>
	</main>
</Layout>

<script>
	// Script mínimo para manejar vistas y reseteo de filtros
	document.addEventListener("DOMContentLoaded", function () {
		console.log("Página principal cargada");

		// Manejar el botón de reseteo de filtros en la página principal
		const resetFiltersBtn = document.getElementById("resetFilters");
		if (resetFiltersBtn) {
			resetFiltersBtn.addEventListener("click", function () {
				const sportFilter = document.getElementById(
					"sportFilter",
				) as HTMLSelectElement;
				const dateFilter = document.getElementById(
					"dateFilter",
				) as HTMLSelectElement;
				const searchFilter = document.getElementById(
					"searchFilter",
				) as HTMLInputElement;

				if (sportFilter) sportFilter.value = "";
				if (dateFilter) dateFilter.value = "";
				if (searchFilter) searchFilter.value = "";

				// Disparar evento de cambio para activar la lógica de filtrado
				if (sportFilter) sportFilter.dispatchEvent(new Event("change"));
			});
		}

		// Manejar las vistas de grid/list
		const gridViewBtn = document.getElementById("gridViewBtn");
		const listViewBtn = document.getElementById("listViewBtn");
		const eventsGrid = document.getElementById("eventsGrid");

		function setGridView() {
			if (!eventsGrid) return;
			localStorage.setItem("viewMode", "grid");
			eventsGrid.className =
				"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-6 transition-all duration-300";

			// Actualizar apariencia de botones
			gridViewBtn?.classList.add("bg-white", "shadow-sm");
			listViewBtn?.classList.remove("bg-white", "shadow-sm");

			// Actualizar iconos
			const gridIcon = gridViewBtn?.querySelector("svg");
			const listIcon = listViewBtn?.querySelector("svg");

			if (gridIcon) gridIcon.classList.add("text-gray-700");
			if (gridIcon) gridIcon.classList.remove("text-gray-500");
			if (listIcon) listIcon.classList.add("text-gray-500");
			if (listIcon) listIcon.classList.remove("text-gray-700");
		}

		function setListView() {
			if (!eventsGrid) return;
			localStorage.setItem("viewMode", "list");
			eventsGrid.className =
				"grid grid-cols-1 gap-4 transition-all duration-300";

			// Actualizar apariencia de botones
			listViewBtn?.classList.add("bg-white", "shadow-sm");
			gridViewBtn?.classList.remove("bg-white", "shadow-sm");

			// Actualizar iconos
			const gridIcon = gridViewBtn?.querySelector("svg");
			const listIcon = listViewBtn?.querySelector("svg");

			if (listIcon) listIcon.classList.add("text-gray-700");
			if (listIcon) listIcon.classList.remove("text-gray-500");
			if (gridIcon) gridIcon.classList.add("text-gray-500");
			if (gridIcon) gridIcon.classList.remove("text-gray-700");
		}

		// Cargar preferencia guardada
		const savedViewMode = localStorage.getItem("viewMode");
		if (savedViewMode === "list") {
			setListView();
		} else {
			setGridView();
		}

		// Event listeners para los botones de vista
		if (gridViewBtn) gridViewBtn.addEventListener("click", setGridView);
		if (listViewBtn) listViewBtn.addEventListener("click", setListView);
	});
</script>

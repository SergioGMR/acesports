---
import Layout from "@/layouts/Layout.astro";
import type { Event, SportEvent } from "@/interfaces/Event";
import SportCard from "@/components/SportCard.tsx";

const request = fetch("https://epg-sports.vercel.app/api/getEvents")
	.then((response) => {
		if (!response.ok) {
			throw new Error("No se pudieron obtener los datos deportivos");
		}
		return response.json();
	})
	.catch((error) => {
		console.error(error);
		return null;
	});

const rawSports = await request;
const sportsData = rawSports.filter(
	(event: SportEvent) =>
		event.links &&
		event.links.length > 0 &&
		event.date.day < new Date().toISOString(),
);

const sports = [...new Set(sportsData.map((event: SportEvent) => event.sport))];
const dates = [
	...new Set(sportsData.map((event: SportEvent) => event.date.day)),
];

const geoIpRequest = fetch("https://get.geojs.io/v1/ip/geo.json")
	.then((response) => {
		if (!response.ok) {
			throw new Error("No se pudo obtener la ubicaciÃ³n del usuario");
		}
		return response.json();
	})
	.catch((error) => {
		console.error(error);
		return null;
	});
const geoIp = await geoIpRequest;
const userTimezone = geoIp?.timezone;
---

<Layout title="ACESports" lastUpdate={sportsData.updated}>
	<main class="container mx-auto py-24 md:py-48 px-10">
		<div
			class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8 gap-y-16"
		>
			{
				sportsData.map((event: SportEvent) => (
					<SportCard
						client:load
						event={event}
						timeZone={userTimezone}
					/>
				))
			}
		</div>
	</main>
</Layout>

<script>
	const sportFilter = document.getElementById(
		"sportFilter",
	) as HTMLSelectElement;
	const dateFilter = document.getElementById(
		"dateFilter",
	) as HTMLSelectElement;
	const searchFilter = document.getElementById(
		"searchFilter",
	) as HTMLInputElement;
	const cards = document.querySelectorAll(".card");

	// Populate filter options
	const sports = [
		...new Set(
			Array.from(cards).map((card) => card.getAttribute("data-sport")),
		),
	];
	const dates = [
		...new Set(
			Array.from(cards).map((card) => card.getAttribute("data-date")),
		),
	];

	function createOptionWithClasses(value: string, text: string) {
		const option = document.createElement("option");
		option.value = value || "";
		option.textContent = text || "";
		option.classList.add(
			"capitalize",
			"bg-white",
			"dark:bg-gray-800",
			"text-gray-900",
			"dark:text-white",
		);
		return option;
	}

	sports.forEach((sport) => {
		const option = createOptionWithClasses(sport || "", sport || "");
		sportFilter.appendChild(option);
	});

	dates.forEach((date) => {
		const option = createOptionWithClasses(date || "", date || "");
		dateFilter.appendChild(option);
	});

	function filterCards() {
		const selectedSport = sportFilter.value.toLowerCase();
		const selectedDate = dateFilter.value;
		const searchText = searchFilter.value.toLowerCase();

		cards.forEach((card) => {
			const cardSport = card.getAttribute("data-sport")?.toLowerCase();
			const cardDate = card.getAttribute("data-date");
			const cardContent = card.textContent?.toLowerCase();
			const cardHome = card.getAttribute("data-home");
			const cardAway = card.getAttribute("data-away");

			const showCard =
				(!selectedSport || cardSport === selectedSport) &&
				(!selectedDate || cardDate === selectedDate) &&
				(!searchText ||
					cardContent?.includes(searchText) ||
					cardHome?.includes(searchText) ||
					cardAway?.includes(searchText));

			(card as HTMLElement).style.display = showCard ? "flex" : "none";

			if (showCard && searchText) {
				highlightText(card as HTMLElement, searchText);
			} else {
				removeHighlight(card as HTMLElement);
			}
		});
	}

	function highlightText(element: HTMLElement, text: string) {
		const searchables = element.querySelectorAll(".searchable");
		searchables.forEach((searchable) => {
			const content = searchable.textContent || "";
			const highlightedContent = content.replace(
				new RegExp(escapeRegExp(text), "gi"),
				(match) => `<mark>${match}</mark>`,
			);
			searchable.innerHTML = highlightedContent;
		});
	}

	function escapeRegExp(string: string) {
		return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
	}

	function removeHighlight(element: HTMLElement) {
		const marks = element.querySelectorAll("mark");
		marks.forEach((mark) => {
			const parent = mark.parentNode;
			if (parent) {
				parent.replaceChild(
					document.createTextNode(mark.textContent || ""),
					mark,
				);
				parent.normalize();
			}
		});
	}

	sportFilter.addEventListener("change", filterCards);
	dateFilter.addEventListener("change", filterCards);
	searchFilter.addEventListener("input", filterCards);
</script>
